package rain_information;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Date;
import javax.swing.JOptionPane;
import nature.stalks.MyConnection;

public class AddRainInformation extends javax.swing.JPanel {

    //  Variables for SQL and connection to database
    Statement statement;
    Connection connection = null;
    ResultSet resultSet;
    String tableName = "rds_db1.rain_info";
    String SQL;
    
    String[] column = {"date", "rain_mm"};

    MyConnection myconnection = new MyConnection();

//    Data Variables
    Date date;
    float rain_mm;

    public AddRainInformation(Connection connection) {
        initComponents();
        this.connection = connection;
        doConnect();

//        set frame location to the centre of the screen
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);

    }

    void doConnect() {

//        'finally' runs regardless of whether an exception is thrown,
//        so the statements and result set are always closed
//        !!!!!!!!!!!!CLOSE all the connections to avoid the too many connections error!!!!!!!!!!!!!
        try {

            SQL = "SELECT * FROM " + tableName;

            statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
                    ResultSet.CONCUR_UPDATABLE);
            resultSet = statement.executeQuery(SQL);

        } catch (SQLException error) {
            System.out.println("addPlant" + error.getMessage());

        }
    }

    public java.sql.Date convertJavaDateToSqlDate(java.util.Date date) {
        return new java.sql.Date(date.getTime());
    }

    void getData() {
        date = convertJavaDateToSqlDate(dateChooser.getDate());
        rain_mm = Float.parseFloat(rain_mm_textField.getText());
    }

    boolean isValidated() {
        
        return true;
    }

    void setValues(ResultSet resultSet) {
        try {
            dateChooser.setDate(resultSet.getDate(column[1]));
            rain_mm_textField.setText(resultSet.getString(column[2]));
            
        } catch(SQLException e){
            System.out.print(e);
        }
    }

    void uploadData() {
        if (isValidated()) {
            try {
                statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
                        ResultSet.CONCUR_UPDATABLE);
                String SQL = "SELECT * FROM " + tableName;
                resultSet = statement.executeQuery(SQL);

                /**
                 * Moves the cursor in the database to insert a new row for all
                 * the data
                 */
                resultSet.moveToInsertRow();
                resultSet.updateDate(column[0], date);
                resultSet.updateFloat(column[1], rain_mm);
                resultSet.insertRow();

            } catch (SQLException error) {
                System.out.println("addPLant "+error);

            } finally {
                try {
                    resultSet.close();
                } catch (Exception error) {
                    System.out.println(error);
                }
            }
        }
    }

    void clear() {
        dateChooser.setDate(null);
        rain_mm_textField.setText(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        confirmButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        dateChooser = new com.toedter.calendar.JDateChooser();
        rain_mm_textField = new javax.swing.JTextField();

        setBackground(new java.awt.Color(39, 45, 54));

        confirmButton.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        confirmButton.setForeground(new java.awt.Color(0, 0, 0));
        confirmButton.setText("Confirm");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        cancelButton.setForeground(new java.awt.Color(0, 0, 0));
        cancelButton.setText("Clear");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Date");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Rain (mm)");

        dateChooser.setForeground(new java.awt.Color(0, 0, 0));
        dateChooser.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        rain_mm_textField.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        rain_mm_textField.setForeground(new java.awt.Color(0, 0, 0));
        rain_mm_textField.setMargin(new java.awt.Insets(0, 2, 0, 0));
        rain_mm_textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rain_mm_textFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(confirmButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 231, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(rain_mm_textField, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rain_mm_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(confirmButton))
                .addGap(23, 23, 23))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        getData();
        uploadData();
        JOptionPane.showMessageDialog(this, "Database Updated");
        clear();
    }//GEN-LAST:event_confirmButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        clear();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void rain_mm_textFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rain_mm_textFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rain_mm_textFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton confirmButton;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField rain_mm_textField;
    // End of variables declaration//GEN-END:variables
}
